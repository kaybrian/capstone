/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 25.02.2025 07:00:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace tflite {
namespace ops {
namespace micro {
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1264;
#else
constexpr int kTensorArenaSize = 240;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_TreeEnsembleClassifier, OP_RESHAPE, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 2;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 2;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,7 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<2, int> tensor_dimension2 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension3 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension4 = { 2, { 1,2 } };
const uint8_t ALIGN(4) opdata0[11353] = { 118, 101, 114, 115, 105, 111, 110, 0, 116, 114, 101, 101, 95, 105, 110, 100, 101, 120, 95, 116, 121, 112, 101, 0, 6, 117, 105, 110, 116, 49, 54, 0, 99, 108, 97, 115, 115, 95, 105, 110, 100, 101, 120, 95, 116, 121, 112, 101, 0, 5, 117, 105, 110, 116, 56, 0, 110, 111, 100, 101, 95, 118, 97, 108, 117, 101, 95, 116, 121, 112, 101, 0, 7, 102, 108, 111, 97, 116, 51, 50, 0, 101, 113, 117, 97, 108, 105, 116, 121, 95, 111, 112, 101, 114, 97, 116, 111, 114, 0, 3, 108, 101, 113, 0, 110, 117, 109, 95, 108, 101, 97, 102, 95, 110, 111, 100, 101, 115, 0, 110, 117, 109, 95, 105, 110, 116, 101, 114, 110, 97, 108, 95, 110, 111, 100, 101, 115, 0, 110, 117, 109, 95, 116, 114, 101, 101, 115, 0, 99, 108, 97, 115, 115, 95, 119, 101, 105, 103, 104, 116, 95, 116, 121, 112, 101, 0, 7, 102, 108, 111, 97, 116, 51, 50, 0, 110, 111, 100, 101, 115, 95, 102, 101, 97, 116, 117, 114, 101, 105, 100, 115, 0, 172, 2, 5, 0, 6, 0, 4, 0, 2, 0, 0, 0, 6, 0, 3, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 5, 0, 5, 0, 3, 0, 3, 0, 5, 0, 1, 0, 4, 0, 3, 0, 1, 0, 3, 0, 2, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 1, 0, 1, 0, 1, 0, 3, 0, 6, 0, 1, 0, 3, 0, 5, 0, 5, 0, 5, 0, 6, 0, 0, 0, 2, 0, 4, 0, 6, 0, 6, 0, 1, 0, 2, 0, 5, 0, 3, 0, 1, 0, 6, 0, 1, 0, 4, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 6, 0, 5, 0, 3, 0, 1, 0, 0, 0, 2, 0, 3, 0, 4, 0, 1, 0, 2, 0, 3, 0, 6, 0, 6, 0, 3, 0, 5, 0, 0, 0, 6, 0, 1, 0, 6, 0, 4, 0, 5, 0, 0, 0, 3, 0, 2, 0, 0, 0, 3, 0, 1, 0, 6, 0, 4, 0, 5, 0, 6, 0, 5, 0, 4, 0, 6, 0, 6, 0, 3, 0, 1, 0, 0, 0, 6, 0, 3, 0, 2, 0, 3, 0, 6, 0, 5, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 4, 0, 6, 0, 5, 0, 5, 0, 0, 0, 3, 0, 3, 0, 6, 0, 4, 0, 6, 0, 3, 0, 0, 0, 5, 0, 5, 0, 2, 0, 6, 0, 6, 0, 1, 0, 5, 0, 3, 0, 6, 0, 6, 0, 0, 0, 6, 0, 0, 0, 1, 0, 5, 0, 5, 0, 1, 0, 6, 0, 1, 0, 2, 0, 6, 0, 3, 0, 1, 0, 1, 0, 5, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 3, 0, 6, 0, 6, 0, 2, 0, 5, 0, 3, 0, 2, 0, 5, 0, 6, 0, 6, 0, 4, 0, 2, 0, 3, 0, 5, 0, 6, 0, 1, 0, 3, 0, 1, 0, 3, 0, 3, 0, 2, 0, 1, 0, 6, 0, 2, 0, 6, 0, 0, 0, 5, 0, 2, 0, 6, 0, 3, 0, 3, 0, 0, 0, 6, 0, 1, 0, 3, 0, 5, 0, 3, 0, 3, 0, 0, 0, 6, 0, 3, 0, 6, 0, 3, 0, 6, 0, 6, 0, 3, 0, 1, 0, 2, 0, 5, 0, 3, 0, 2, 0, 3, 0, 6, 0, 6, 0, 1, 0, 5, 0, 0, 0, 0, 0, 1, 0, 5, 0, 3, 0, 6, 0, 6, 0, 6, 0, 0, 0, 3, 0, 3, 0, 1, 0, 3, 0, 5, 0, 6, 0, 1, 0, 5, 0, 2, 0, 0, 0, 1, 0, 6, 0, 0, 0, 6, 0, 1, 0, 3, 0, 5, 0, 1, 0, 6, 0, 0, 0, 0, 0, 4, 0, 3, 0, 1, 0, 3, 0, 5, 0, 2, 0, 6, 0, 1, 0, 1, 0, 6, 0, 3, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 6, 0, 5, 0, 0, 0, 3, 0, 6, 0, 4, 0, 3, 0, 6, 0, 3, 0, 5, 0, 1, 0, 3, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 5, 0, 6, 0, 3, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 0, 5, 0, 3, 0, 2, 0, 5, 0, 2, 0, 2, 0, 3, 0, 3, 0, 2, 0, 2, 0, 1, 0, 6, 0, 3, 0, 6, 0, 0, 0, 2, 0, 6, 0, 2, 0, 5, 0, 5, 0, 2, 0, 1, 0, 3, 0, 5, 0, 6, 0, 6, 0, 6, 0, 5, 0, 0, 0, 3, 0, 6, 0, 3, 0, 1, 0, 3, 0, 1, 0, 3, 0, 3, 0, 3, 0, 6, 0, 6, 0, 2, 0, 0, 0, 5, 0, 2, 0, 6, 0, 6, 0, 0, 0, 6, 0, 4, 0, 1, 0, 3, 0, 6, 0, 3, 0, 3, 0, 3, 0, 5, 0, 3, 0, 3, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 6, 0, 2, 0, 5, 0, 2, 0, 5, 0, 1, 0, 6, 0, 6, 0, 5, 0, 6, 0, 5, 0, 0, 0, 0, 0, 1, 0, 6, 0, 3, 0, 3, 0, 3, 0, 0, 0, 5, 0, 0, 0, 6, 0, 6, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0, 0, 3, 0, 6, 0, 5, 0, 1, 0, 3, 0, 2, 0, 1, 0, 6, 0, 5, 0, 3, 0, 2, 0, 6, 0, 3, 0, 6, 0, 5, 0, 1, 0, 0, 0, 0, 0, 5, 0, 3, 0, 4, 0, 1, 0, 3, 0, 6, 0, 3, 0, 1, 0, 1, 0, 3, 0, 3, 0, 5, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 6, 0, 3, 0, 4, 0, 4, 0, 5, 0, 5, 0, 2, 0, 1, 0, 6, 0, 6, 0, 6, 0, 2, 0, 0, 0, 6, 0, 6, 0, 5, 0, 4, 0, 3, 0, 6, 0, 3, 0, 6, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 0, 3, 0, 6, 0, 6, 0, 3, 0, 6, 0, 5, 0, 1, 0, 4, 0, 1, 0, 6, 0, 0, 0, 1, 0, 4, 0, 5, 0, 0, 0, 4, 0, 1, 0, 5, 0, 3, 0, 3, 0, 6, 0, 1, 0, 3, 0, 0, 0, 2, 0, 5, 0, 1, 0, 6, 0, 2, 0, 0, 0, 5, 0, 0, 0, 4, 0, 5, 0, 1, 0, 3, 0, 3, 0, 0, 0, 2, 0, 2, 0, 1, 0, 3, 0, 0, 0, 6, 0, 3, 0, 6, 0, 5, 0, 6, 0, 0, 0, 2, 0, 5, 0, 6, 0, 6, 0, 5, 0, 1, 0, 1, 0, 3, 0, 5, 0, 2, 0, 0, 0, 3, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 6, 0, 5, 0, 5, 0, 3, 0, 6, 0, 1, 0, 2, 0, 3, 0, 3, 0, 3, 0, 6, 0, 0, 0, 3, 0, 6, 0, 5, 0, 1, 0, 3, 0, 4, 0, 3, 0, 1, 0, 3, 0, 3, 0, 5, 0, 1, 0, 3, 0, 6, 0, 4, 0, 2, 0, 5, 0, 1, 0, 0, 0, 5, 0, 6, 0, 5, 0, 1, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 0, 0, 0, 1, 0, 4, 0, 2, 0, 3, 0, 6, 0, 6, 0, 0, 0, 1, 0, 3, 0, 5, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0, 0, 5, 0, 1, 0, 3, 0, 3, 0, 3, 0, 6, 0, 1, 0, 0, 0, 5, 0, 3, 0, 0, 0, 6, 0, 5, 0, 6, 0, 1, 0, 5, 0, 6, 0, 0, 0, 4, 0, 1, 0, 1, 0, 2, 0, 4, 0, 5, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 0, 6, 0, 1, 0, 3, 0, 6, 0, 6, 0, 2, 0, 6, 0, 2, 0, 5, 0, 1, 0, 3, 0, 6, 0, 4, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 0, 6, 0, 2, 0, 3, 0, 5, 0, 1, 0, 2, 0, 6, 0, 6, 0, 1, 0, 0, 0, 3, 0, 0, 0, 6, 0, 1, 0, 2, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 6, 0, 5, 0, 1, 0, 3, 0, 5, 0, 5, 0, 3, 0, 6, 0, 1, 0, 0, 0, 3, 0, 2, 0, 0, 0, 3, 0, 4, 0, 6, 0, 0, 0, 6, 0, 4, 0, 5, 0, 1, 0, 0, 0, 3, 0, 3, 0, 6, 0, 6, 0, 6, 0, 0, 0, 3, 0, 4, 0, 6, 0, 1, 0, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 5, 0, 6, 0, 110, 111, 100, 101, 115, 95, 118, 97, 108, 117, 101, 115, 0, 0, 172, 2, 10, 146, 144, 62, 231, 32, 94, 61, 224, 231, 80, 63, 92, 1, 25, 189, 70, 245, 182, 191, 157, 92, 7, 63, 153, 4, 231, 190, 58, 155, 234, 191, 36, 222, 91, 190, 232, 18, 232, 190, 144, 66, 34, 64, 30, 179, 131, 191, 10, 146, 144, 62, 10, 146, 144, 62, 116, 229, 4, 63, 134, 11, 160, 190, 10, 146, 144, 62, 88, 60, 60, 191, 224, 231, 80, 63, 156, 24, 192, 191, 88, 60, 60, 191, 153, 4, 231, 190, 4, 88, 102, 190, 164, 189, 174, 63, 153, 49, 155, 191, 36, 222, 91, 190, 232, 18, 232, 190, 36, 32, 182, 191, 88, 60, 60, 191, 88, 60, 60, 191, 88, 60, 60, 191, 242, 186, 65, 63, 5, 102, 254, 59, 88, 60, 60, 191, 172, 183, 2, 191, 10, 146, 144, 62, 10, 146, 144, 62, 10, 146, 144, 62, 58, 244, 127, 62, 114, 71, 182, 61, 170, 54, 46, 191, 227, 151, 65, 191, 36, 222, 91, 190, 42, 64, 131, 61, 88, 60, 60, 191, 135, 253, 141, 191, 10, 146, 144, 62, 232, 84, 136, 191, 88, 60, 60, 191, 101, 135, 30, 189, 88, 60, 60, 191, 224, 231, 80, 63, 190, 131, 245, 62, 227, 87, 159, 188, 27, 157, 142, 190, 142, 139, 176, 190, 92, 1, 25, 189, 233, 214, 66, 63, 10, 146, 144, 62, 92, 196, 139, 190, 88, 60, 60, 191, 103, 8, 114, 190, 61, 177, 95, 63, 12, 203, 16, 189, 224, 231, 80, 63, 88, 60, 60, 191, 242, 168, 238, 190, 242, 186, 65, 63, 49, 95, 80, 62, 233, 214, 66, 63, 124, 27, 104, 191, 10, 146, 144, 62, 132, 34, 162, 191, 53, 81, 126, 63, 88, 60, 60, 191, 36, 222, 91, 190, 224, 231, 80, 63, 10, 146, 144, 62, 178, 249, 2, 190, 232, 84, 136, 191, 152, 82, 211, 63, 146, 160, 156, 62, 232, 36, 50, 190, 88, 60, 60, 191, 69, 176, 180, 63, 224, 231, 80, 63, 10, 146, 144, 62, 39, 143, 175, 62, 10, 146, 144, 62, 227, 151, 65, 191, 101, 135, 30, 189, 166, 241, 54, 63, 18, 108, 70, 190, 88, 60, 60, 191, 42, 24, 99, 191, 36, 222, 91, 190, 188, 17, 6, 192, 138, 222, 159, 63, 211, 26, 20, 63, 28, 132, 157, 190, 10, 146, 144, 62, 29, 215, 196, 191, 150, 185, 133, 190, 10, 146, 144, 62, 103, 8, 114, 190, 42, 24, 99, 191, 12, 203, 16, 189, 88, 60, 60, 191, 246, 144, 226, 63, 227, 151, 65, 191, 48, 36, 223, 62, 10, 146, 144, 62, 10, 146, 144, 62, 110, 50, 74, 62, 92, 196, 139, 190, 51, 195, 118, 60, 59, 244, 127, 62, 224, 231, 80, 63, 34, 39, 31, 63, 134, 177, 119, 62, 164, 215, 5, 63, 10, 146, 144, 62, 10, 146, 144, 62, 92, 115, 180, 63, 40, 202, 32, 62, 101, 135, 30, 189, 88, 60, 60, 191, 10, 146, 144, 62, 45, 130, 153, 189, 157, 92, 7, 63, 48, 36, 223, 62, 42, 24, 99, 191, 16, 62, 154, 189, 94, 220, 191, 63, 88, 60, 60, 191, 10, 146, 144, 62, 10, 146, 144, 62, 88, 60, 60, 191, 5, 102, 254, 59, 88, 60, 60, 191, 205, 74, 255, 62, 42, 64, 131, 61, 116, 229, 4, 63, 88, 60, 60, 191, 88, 60, 60, 191, 10, 146, 144, 62, 3, 85, 136, 63, 10, 146, 144, 62, 224, 231, 80, 63, 114, 71, 182, 61, 205, 74, 255, 62, 130, 45, 176, 191, 216, 219, 126, 191, 20, 182, 155, 191, 24, 13, 252, 61, 42, 64, 131, 61, 27, 73, 44, 190, 138, 222, 159, 63, 10, 146, 144, 62, 3, 17, 201, 188, 195, 220, 172, 191, 10, 146, 144, 62, 58, 244, 127, 62, 166, 241, 54, 63, 227, 151, 65, 191, 61, 177, 95, 63, 167, 191, 166, 191, 10, 146, 144, 62, 34, 104, 249, 189, 88, 60, 60, 191, 197, 95, 212, 191, 88, 60, 60, 191, 51, 195, 118, 60, 253, 97, 40, 63, 160, 110, 169, 191, 88, 60, 60, 191, 157, 92, 7, 63, 10, 132, 80, 191, 32, 236, 45, 191, 146, 160, 156, 62, 10, 146, 144, 62, 98, 215, 54, 64, 101, 135, 30, 189, 70, 73, 106, 63, 51, 195, 118, 60, 42, 24, 99, 191, 34, 39, 31, 63, 88, 60, 60, 191, 116, 229, 4, 63, 10, 146, 144, 62, 176, 82, 180, 190, 18, 108, 70, 190, 227, 87, 159, 188, 49, 95, 80, 62, 230, 19, 91, 63, 157, 92, 7, 63, 116, 229, 4, 63, 49, 95, 80, 62, 233, 214, 66, 63, 18, 63, 114, 191, 88, 60, 60, 191, 160, 110, 169, 191, 10, 146, 144, 62, 18, 63, 114, 191, 242, 168, 238, 190, 242, 186, 65, 63, 92, 88, 144, 60, 27, 73, 44, 190, 88, 60, 60, 191, 10, 146, 144, 62, 3, 85, 136, 63, 178, 249, 2, 190, 88, 60, 60, 191, 10, 146, 144, 62, 237, 31, 144, 62, 164, 189, 174, 63, 157, 92, 7, 63, 58, 244, 127, 62, 236, 39, 212, 62, 51, 195, 118, 60, 102, 42, 197, 191, 88, 60, 60, 191, 116, 229, 4, 63, 10, 146, 144, 62, 130, 45, 176, 191, 88, 60, 60, 191, 10, 146, 144, 62, 138, 222, 159, 63, 202, 154, 224, 191, 88, 60, 60, 191, 101, 135, 30, 189, 232, 18, 232, 190, 130, 45, 176, 191, 88, 60, 60, 191, 242, 186, 65, 63, 10, 146, 144, 62, 88, 60, 60, 191, 37, 25, 205, 190, 42, 24, 99, 191, 110, 50, 74, 62, 224, 231, 80, 63, 237, 31, 144, 62, 88, 60, 60, 191, 116, 229, 4, 63, 10, 146, 144, 62, 152, 135, 54, 63, 34, 39, 31, 63, 88, 60, 60, 191, 88, 60, 60, 191, 98, 216, 162, 63, 116, 229, 4, 63, 42, 24, 99, 191, 232, 18, 232, 190, 103, 76, 150, 61, 81, 240, 80, 63, 88, 60, 60, 191, 10, 132, 80, 191, 116, 229, 4, 63, 88, 60, 60, 191, 88, 60, 60, 191, 114, 71, 182, 61, 176, 24, 164, 63, 53, 81, 126, 63, 88, 60, 60, 191, 5, 102, 254, 59, 10, 146, 144, 62, 146, 160, 156, 62, 51, 195, 118, 60, 164, 189, 174, 63, 227, 151, 65, 191, 50, 80, 35, 63, 42, 64, 131, 61, 12, 203, 16, 189, 10, 146, 144, 62, 88, 60, 60, 191, 156, 24, 192, 191, 88, 60, 60, 191, 10, 146, 144, 62, 42, 24, 99, 191, 232, 18, 232, 190, 110, 50, 74, 62, 88, 60, 60, 191, 164, 189, 174, 63, 227, 87, 159, 188, 10, 146, 144, 62, 34, 104, 249, 189, 18, 156, 156, 191, 190, 131, 245, 62, 114, 71, 182, 61, 224, 231, 80, 63, 218, 54, 150, 63, 10, 146, 144, 62, 42, 24, 99, 191, 88, 60, 60, 191, 10, 146, 144, 62, 218, 108, 116, 63, 144, 66, 34, 64, 10, 146, 144, 62, 205, 74, 255, 62, 170, 54, 46, 191, 116, 136, 218, 63, 86, 232, 172, 63, 20, 182, 155, 191, 61, 177, 95, 63, 88, 60, 60, 191, 5, 102, 254, 59, 139, 214, 167, 63, 40, 202, 32, 62, 207, 144, 43, 191, 199, 83, 248, 191, 126, 0, 145, 63, 30, 179, 131, 191, 10, 146, 144, 62, 10, 146, 144, 62, 198, 242, 33, 63, 88, 60, 60, 191, 50, 80, 35, 63, 10, 146, 144, 62, 221, 13, 139, 63, 36, 222, 91, 190, 157, 92, 7, 63, 10, 146, 144, 62, 110, 50, 74, 62, 92, 196, 139, 190, 98, 216, 162, 63, 116, 229, 4, 63, 88, 60, 60, 191, 33, 108, 179, 191, 88, 60, 60, 191, 152, 239, 143, 191, 39, 169, 60, 63, 211, 26, 20, 63, 166, 241, 54, 63, 36, 222, 91, 190, 58, 155, 234, 191, 244, 184, 210, 191, 10, 146, 144, 62, 205, 74, 255, 62, 68, 150, 48, 64, 166, 241, 54, 63, 114, 71, 182, 61, 231, 32, 94, 61, 227, 151, 65, 191, 88, 60, 60, 191, 20, 83, 203, 63, 98, 216, 162, 63, 116, 229, 4, 63, 27, 47, 170, 190, 28, 2, 86, 63, 10, 146, 144, 62, 104, 62, 30, 63, 3, 17, 201, 188, 88, 60, 60, 191, 110, 50, 74, 62, 227, 151, 65, 191, 236, 39, 212, 62, 88, 60, 60, 191, 157, 92, 7, 63, 254, 37, 146, 63, 10, 146, 144, 62, 112, 72, 53, 62, 10, 146, 144, 62, 88, 60, 60, 191, 176, 134, 102, 63, 221, 13, 139, 63, 10, 146, 144, 62, 101, 135, 30, 189, 10, 146, 144, 62, 11, 160, 219, 63, 114, 71, 182, 61, 88, 60, 60, 191, 223, 65, 19, 63, 86, 232, 172, 63, 116, 229, 4, 63, 98, 1, 149, 191, 114, 71, 182, 61, 10, 146, 144, 62, 114, 71, 182, 61, 164, 189, 174, 63, 39, 143, 175, 62, 88, 60, 60, 191, 224, 231, 80, 63, 34, 205, 15, 191, 88, 60, 60, 191, 172, 34, 89, 63, 46, 40, 241, 190, 101, 135, 30, 189, 10, 146, 144, 62, 88, 60, 60, 191, 156, 24, 192, 191, 205, 74, 255, 62, 88, 60, 60, 191, 16, 62, 154, 189, 10, 146, 144, 62, 102, 250, 110, 190, 155, 104, 200, 62, 233, 214, 66, 63, 92, 196, 139, 190, 46, 174, 252, 190, 10, 146, 144, 62, 88, 60, 60, 191, 164, 215, 5, 63, 172, 34, 89, 63, 10, 146, 144, 62, 62, 247, 9, 63, 224, 231, 80, 63, 88, 60, 60, 191, 212, 158, 234, 189, 43, 188, 78, 63, 12, 203, 16, 189, 88, 60, 60, 191, 88, 60, 60, 191, 200, 115, 45, 63, 116, 229, 4, 63, 10, 146, 144, 62, 103, 8, 114, 190, 84, 212, 83, 191, 178, 102, 141, 191, 88, 60, 60, 191, 94, 220, 191, 63, 101, 135, 30, 189, 18, 108, 70, 190, 227, 151, 65, 191, 224, 231, 80, 63, 10, 146, 144, 62, 10, 146, 144, 62, 103, 76, 150, 61, 88, 60, 60, 191, 36, 222, 91, 190, 221, 13, 139, 63, 90, 60, 10, 191, 13, 32, 162, 60, 178, 249, 2, 190, 221, 13, 139, 63, 157, 92, 7, 63, 10, 146, 144, 62, 224, 231, 80, 63, 148, 60, 225, 62, 36, 222, 91, 190, 211, 26, 20, 63, 126, 0, 145, 63, 88, 60, 60, 191, 10, 146, 144, 62, 215, 219, 126, 191, 236, 39, 212, 62, 42, 24, 99, 191, 81, 155, 33, 63, 224, 231, 80, 63, 175, 173, 121, 191, 10, 146, 144, 62, 158, 44, 25, 63, 53, 81, 126, 63, 233, 214, 66, 63, 224, 148, 38, 62, 34, 39, 31, 63, 10, 146, 144, 62, 88, 60, 60, 191, 224, 231, 80, 63, 88, 60, 60, 191, 36, 222, 91, 190, 227, 87, 159, 188, 88, 60, 60, 191, 227, 151, 65, 191, 10, 146, 144, 62, 146, 160, 156, 62, 224, 231, 80, 63, 88, 60, 60, 191, 10, 146, 144, 62, 238, 52, 231, 63, 116, 229, 4, 63, 37, 25, 205, 190, 88, 60, 60, 191, 190, 131, 245, 62, 110, 50, 74, 62, 20, 182, 155, 191, 10, 146, 144, 62, 88, 60, 60, 191, 36, 222, 91, 190, 136, 185, 80, 62, 154, 235, 239, 62, 10, 146, 144, 62, 232, 18, 232, 190, 224, 231, 80, 63, 10, 146, 144, 62, 88, 60, 60, 191, 176, 82, 180, 190, 179, 231, 97, 189, 227, 87, 159, 188, 186, 4, 20, 190, 186, 4, 20, 190, 88, 60, 60, 191, 116, 229, 4, 63, 42, 24, 99, 191, 130, 45, 176, 191, 134, 11, 160, 190, 221, 13, 139, 63, 10, 146, 144, 62, 5, 102, 254, 59, 110, 50, 74, 62, 113, 109, 132, 63, 10, 146, 144, 62, 39, 143, 175, 62, 34, 39, 31, 63, 10, 146, 144, 62, 88, 60, 60, 191, 88, 60, 60, 191, 116, 229, 4, 63, 10, 146, 144, 62, 80, 96, 87, 191, 114, 71, 182, 61, 218, 153, 200, 190, 34, 104, 249, 189, 13, 32, 162, 60, 58, 155, 234, 191, 224, 231, 80, 63, 30, 179, 131, 191, 157, 92, 7, 63, 10, 146, 144, 62, 10, 146, 144, 62, 148, 60, 225, 62, 36, 222, 91, 190, 88, 60, 60, 191, 86, 34, 123, 63, 20, 83, 203, 63, 116, 229, 4, 63, 182, 77, 18, 62, 233, 214, 66, 63, 114, 71, 182, 61, 20, 83, 203, 63, 34, 39, 31, 63, 10, 146, 144, 62, 88, 60, 60, 191, 12, 203, 16, 189, 227, 151, 65, 191, 190, 131, 245, 62, 88, 60, 60, 191, 50, 80, 35, 63, 28, 98, 130, 61, 10, 146, 144, 62, 88, 60, 60, 191, 190, 131, 245, 62, 48, 36, 223, 62, 227, 151, 65, 191, 195, 220, 172, 191, 10, 146, 144, 62, 88, 60, 60, 191, 244, 184, 210, 191, 10, 146, 144, 62, 233, 214, 66, 63, 10, 146, 144, 62, 88, 60, 60, 191, 103, 8, 114, 190, 227, 87, 159, 188, 116, 229, 4, 63, 10, 146, 144, 62, 10, 146, 144, 62, 52, 190, 205, 63, 88, 60, 60, 191, 224, 231, 80, 63, 205, 74, 255, 62, 12, 203, 16, 189, 27, 73, 44, 190, 233, 214, 66, 63, 83, 54, 85, 191, 88, 60, 60, 191, 116, 229, 4, 63, 10, 146, 144, 62, 27, 47, 170, 190, 207, 144, 43, 191, 48, 36, 223, 62, 94, 220, 191, 63, 135, 250, 177, 63, 114, 71, 182, 61, 34, 104, 249, 189, 88, 60, 60, 191, 10, 146, 144, 62, 213, 64, 75, 63, 10, 146, 144, 62, 88, 60, 60, 191, 242, 186, 65, 63, 134, 11, 160, 190, 30, 67, 131, 191, 40, 202, 32, 62, 88, 60, 60, 191, 244, 184, 210, 191, 10, 146, 144, 62, 190, 131, 245, 62, 114, 71, 182, 61, 101, 135, 30, 189, 10, 146, 144, 62, 12, 96, 216, 63, 88, 60, 60, 191, 10, 146, 144, 62, 157, 92, 7, 63, 110, 50, 74, 62, 224, 231, 80, 63, 88, 60, 60, 191, 88, 60, 60, 191, 4, 138, 20, 64, 224, 231, 80, 63, 10, 146, 144, 62, 110, 50, 74, 62, 116, 229, 4, 63, 68, 2, 153, 63, 224, 231, 80, 63, 135, 253, 141, 191, 157, 92, 7, 63, 88, 60, 60, 191, 51, 195, 118, 60, 126, 0, 145, 63, 157, 92, 7, 63, 160, 110, 169, 191, 46, 174, 252, 190, 146, 197, 18, 191, 10, 146, 144, 62, 88, 60, 60, 191, 48, 202, 200, 63, 101, 135, 30, 189, 224, 231, 80, 63, 200, 162, 2, 64, 175, 173, 121, 191, 10, 146, 144, 62, 153, 4, 231, 190, 81, 155, 33, 63, 101, 135, 30, 189, 135, 253, 141, 191, 176, 37, 96, 63, 10, 146, 144, 62, 88, 60, 60, 191, 163, 79, 187, 63, 39, 143, 175, 62, 34, 39, 31, 63, 88, 60, 60, 191, 166, 114, 57, 191, 242, 186, 65, 63, 166, 114, 57, 191, 231, 32, 94, 61, 88, 60, 60, 191, 152, 135, 54, 63, 10, 146, 144, 62, 88, 60, 60, 191, 114, 71, 182, 61, 166, 114, 57, 191, 88, 60, 60, 191, 10, 146, 144, 62, 70, 176, 180, 63, 10, 146, 144, 62, 88, 60, 60, 191, 92, 196, 139, 190, 10, 146, 144, 62, 10, 146, 144, 62, 64, 219, 12, 191, 162, 196, 151, 62, 88, 60, 60, 191, 202, 154, 224, 191, 116, 229, 4, 63, 4, 138, 20, 64, 114, 71, 182, 61, 152, 239, 143, 191, 227, 151, 65, 191, 164, 189, 174, 63, 34, 205, 15, 191, 42, 64, 131, 61, 224, 231, 80, 63, 10, 146, 144, 62, 88, 60, 60, 191, 176, 24, 164, 63, 242, 186, 65, 63, 24, 13, 252, 61, 157, 92, 7, 63, 110, 161, 90, 63, 233, 214, 66, 63, 110, 50, 74, 62, 92, 196, 139, 190, 224, 231, 80, 63, 37, 25, 205, 190, 88, 60, 60, 191, 146, 160, 156, 62, 4, 225, 220, 190, 88, 60, 60, 191, 88, 60, 60, 191, 88, 60, 60, 191, 10, 146, 144, 62, 5, 102, 254, 59, 110, 111, 100, 101, 115, 95, 116, 114, 117, 101, 110, 111, 100, 101, 105, 100, 115, 0, 172, 2, 172, 2, 174, 2, 0, 0, 177, 2, 176, 2, 2, 0, 179, 2, 181, 2, 6, 0, 183, 2, 185, 2, 9, 0, 8, 0, 187, 2, 189, 2, 13, 0, 192, 2, 191, 2, 15, 0, 194, 2, 196, 2, 19, 0, 198, 2, 200, 2, 22, 0, 21, 0, 202, 2, 204, 2, 26, 0, 206, 2, 208, 2, 29, 0, 28, 0, 210, 2, 212, 2, 33, 0, 214, 2, 216, 2, 36, 0, 35, 0, 218, 2, 220, 2, 40, 0, 222, 2, 224, 2, 43, 0, 42, 0, 226, 2, 228, 2, 47, 0, 230, 2, 232, 2, 50, 0, 49, 0, 234, 2, 236, 2, 54, 0, 238, 2, 240, 2, 57, 0, 56, 0, 242, 2, 244, 2, 61, 0, 246, 2, 248, 2, 64, 0, 63, 0, 250, 2, 252, 2, 68, 0, 254, 2, 0, 3, 71, 0, 70, 0, 2, 3, 4, 3, 75, 0, 7, 3, 6, 3, 77, 0, 9, 3, 11, 3, 81, 0, 13, 3, 15, 3, 84, 0, 83, 0, 17, 3, 19, 3, 88, 0, 21, 3, 23, 3, 91, 0, 90, 0, 26, 3, 25, 3, 28, 3, 30, 3, 97, 0, 96, 0, 32, 3, 34, 3, 101, 0, 36, 3, 38, 3, 104, 0, 103, 0, 40, 3, 42, 3, 108, 0, 44, 3, 46, 3, 111, 0, 110, 0, 48, 3, 50, 3, 115, 0, 52, 3, 54, 3, 118, 0, 117, 0, 56, 3, 58, 3, 122, 0, 60, 3, 62, 3, 125, 0, 124, 0, 64, 3, 66, 3, 129, 0, 68, 3, 70, 3, 132, 0, 131, 0, 72, 3, 74, 3, 136, 0, 76, 3, 78, 3, 139, 0, 138, 0, 80, 3, 82, 3, 143, 0, 84, 3, 86, 3, 146, 0, 145, 0, 89, 3, 88, 3, 91, 3, 93, 3, 152, 0, 151, 0, 95, 3, 97, 3, 156, 0, 99, 3, 101, 3, 159, 0, 158, 0, 103, 3, 105, 3, 163, 0, 107, 3, 109, 3, 166, 0, 165, 0, 111, 3, 113, 3, 170, 0, 115, 3, 117, 3, 173, 0, 172, 0, 119, 3, 121, 3, 177, 0, 123, 3, 180, 0, 179, 0, 126, 3, 128, 3, 183, 0, 130, 3, 132, 3, 186, 0, 185, 0, 134, 3, 136, 3, 190, 0, 138, 3, 140, 3, 193, 0, 192, 0, 142, 3, 144, 3, 197, 0, 147, 3, 146, 3, 199, 0, 149, 3, 151, 3, 203, 0, 153, 3, 155, 3, 206, 0, 205, 0, 157, 3, 159, 3, 210, 0, 161, 3, 163, 3, 213, 0, 212, 0, 165, 3, 167, 3, 217, 0, 169, 3, 171, 3, 220, 0, 219, 0, 173, 3, 175, 3, 224, 0, 177, 3, 179, 3, 227, 0, 226, 0, 181, 3, 183, 3, 231, 0, 185, 3, 187, 3, 234, 0, 233, 0, 189, 3, 191, 3, 238, 0, 193, 3, 195, 3, 241, 0, 240, 0, 197, 3, 199, 3, 245, 0, 201, 3, 248, 0, 247, 0, 204, 3, 206, 3, 251, 0, 208, 3, 210, 3, 254, 0, 253, 0, 212, 3, 214, 3, 2, 1, 216, 3, 218, 3, 5, 1, 4, 1, 220, 3, 222, 3, 9, 1, 224, 3, 226, 3, 12, 1, 11, 1, 228, 3, 230, 3, 16, 1, 232, 3, 234, 3, 19, 1, 18, 1, 236, 3, 238, 3, 23, 1, 240, 3, 242, 3, 26, 1, 25, 1, 244, 3, 246, 3, 30, 1, 248, 3, 33, 1, 32, 1, 251, 3, 253, 3, 36, 1, 255, 3, 1, 4, 39, 1, 38, 1, 3, 4, 5, 4, 43, 1, 7, 4, 9, 4, 46, 1, 45, 1, 11, 4, 13, 4, 50, 1, 15, 4, 17, 4, 53, 1, 52, 1, 19, 4, 21, 4, 57, 1, 23, 4, 25, 4, 60, 1, 59, 1, 27, 4, 29, 4, 64, 1, 31, 4, 33, 4, 67, 1, 66, 1, 35, 4, 37, 4, 71, 1, 39, 4, 41, 4, 74, 1, 73, 1, 43, 4, 45, 4, 78, 1, 47, 4, 49, 4, 81, 1, 80, 1, 51, 4, 53, 4, 85, 1, 55, 4, 88, 1, 87, 1, 58, 4, 60, 4, 91, 1, 62, 4, 64, 4, 94, 1, 93, 1, 66, 4, 68, 4, 98, 1, 70, 4, 101, 1, 100, 1, 73, 4, 75, 4, 104, 1, 77, 4, 79, 4, 107, 1, 106, 1, 81, 4, 83, 4, 111, 1, 85, 4, 87, 4, 114, 1, 113, 1, 89, 4, 91, 4, 118, 1, 93, 4, 95, 4, 121, 1, 120, 1, 97, 4, 99, 4, 125, 1, 101, 4, 103, 4, 128, 1, 127, 1, 105, 4, 107, 4, 132, 1, 109, 4, 111, 4, 135, 1, 134, 1, 113, 4, 139, 1, 116, 4, 118, 4, 141, 1, 140, 1, 120, 4, 122, 4, 145, 1, 124, 4, 126, 4, 148, 1, 147, 1, 128, 4, 130, 4, 152, 1, 132, 4, 134, 4, 155, 1, 154, 1, 136, 4, 138, 4, 159, 1, 140, 4, 142, 4, 162, 1, 161, 1, 144, 4, 146, 4, 166, 1, 148, 4, 150, 4, 169, 1, 168, 1, 152, 4, 154, 4, 173, 1, 156, 4, 158, 4, 176, 1, 175, 1, 160, 4, 162, 4, 180, 1, 164, 4, 166, 4, 183, 1, 182, 1, 168, 4, 170, 4, 187, 1, 172, 4, 174, 4, 190, 1, 189, 1, 176, 4, 178, 4, 194, 1, 180, 4, 182, 4, 197, 1, 196, 1, 184, 4, 186, 4, 201, 1, 188, 4, 190, 4, 204, 1, 203, 1, 192, 4, 194, 4, 208, 1, 196, 4, 198, 4, 211, 1, 210, 1, 200, 4, 202, 4, 215, 1, 204, 4, 206, 4, 218, 1, 217, 1, 208, 4, 210, 4, 222, 1, 212, 4, 214, 4, 225, 1, 224, 1, 216, 4, 218, 4, 229, 1, 220, 4, 222, 4, 232, 1, 231, 1, 225, 4, 224, 4, 227, 4, 229, 4, 238, 1, 237, 1, 231, 4, 233, 4, 242, 1, 235, 4, 237, 4, 245, 1, 244, 1, 239, 4, 241, 4, 249, 1, 243, 4, 245, 4, 252, 1, 251, 1, 248, 4, 247, 4, 250, 4, 252, 4, 2, 2, 1, 2, 254, 4, 0, 5, 6, 2, 2, 5, 4, 5, 9, 2, 8, 2, 6, 5, 8, 5, 13, 2, 10, 5, 12, 5, 16, 2, 15, 2, 14, 5, 16, 5, 20, 2, 18, 5, 20, 5, 23, 2, 22, 2, 22, 5, 24, 5, 27, 2, 27, 5, 26, 5, 29, 2, 29, 5, 31, 5, 33, 2, 33, 5, 35, 5, 36, 2, 35, 2, 37, 5, 39, 5, 40, 2, 41, 5, 43, 5, 43, 2, 42, 2, 45, 5, 47, 5, 47, 2, 49, 5, 51, 5, 50, 2, 49, 2, 53, 5, 55, 5, 54, 2, 57, 5, 59, 5, 57, 2, 56, 2, 61, 5, 63, 5, 61, 2, 65, 5, 67, 5, 64, 2, 63, 2, 69, 5, 71, 5, 68, 2, 73, 5, 75, 5, 71, 2, 70, 2, 77, 5, 79, 5, 75, 2, 81, 5, 83, 5, 78, 2, 77, 2, 85, 5, 87, 5, 82, 2, 89, 5, 91, 5, 85, 2, 84, 2, 93, 5, 95, 5, 89, 2, 97, 5, 99, 5, 92, 2, 91, 2, 101, 5, 103, 5, 96, 2, 105, 5, 107, 5, 99, 2, 98, 2, 109, 5, 111, 5, 103, 2, 113, 5, 115, 5, 106, 2, 105, 2, 117, 5, 119, 5, 110, 2, 121, 5, 113, 2, 112, 2, 124, 5, 126, 5, 116, 2, 128, 5, 130, 5, 119, 2, 118, 2, 132, 5, 134, 5, 123, 2, 136, 5, 138, 5, 126, 2, 125, 2, 140, 5, 142, 5, 130, 2, 144, 5, 146, 5, 133, 2, 132, 2, 148, 5, 150, 5, 137, 2, 152, 5, 154, 5, 140, 2, 139, 2, 156, 5, 158, 5, 144, 2, 160, 5, 162, 5, 147, 2, 146, 2, 164, 5, 166, 5, 151, 2, 168, 5, 170, 5, 154, 2, 153, 2, 172, 5, 174, 5, 158, 2, 176, 5, 178, 5, 161, 2, 160, 2, 180, 5, 182, 5, 165, 2, 184, 5, 186, 5, 168, 2, 167, 2, 110, 111, 100, 101, 115, 95, 102, 97, 108, 115, 101, 110, 111, 100, 101, 105, 100, 115, 0, 0, 172, 2, 173, 2, 175, 2, 1, 0, 178, 2, 3, 0, 4, 0, 180, 2, 182, 2, 7, 0, 184, 2, 186, 2, 10, 0, 11, 0, 188, 2, 190, 2, 14, 0, 193, 2, 16, 0, 17, 0, 195, 2, 197, 2, 20, 0, 199, 2, 201, 2, 23, 0, 24, 0, 203, 2, 205, 2, 27, 0, 207, 2, 209, 2, 30, 0, 31, 0, 211, 2, 213, 2, 34, 0, 215, 2, 217, 2, 37, 0, 38, 0, 219, 2, 221, 2, 41, 0, 223, 2, 225, 2, 44, 0, 45, 0, 227, 2, 229, 2, 48, 0, 231, 2, 233, 2, 51, 0, 52, 0, 235, 2, 237, 2, 55, 0, 239, 2, 241, 2, 58, 0, 59, 0, 243, 2, 245, 2, 62, 0, 247, 2, 249, 2, 65, 0, 66, 0, 251, 2, 253, 2, 69, 0, 255, 2, 1, 3, 72, 0, 73, 0, 3, 3, 5, 3, 76, 0, 8, 3, 78, 0, 79, 0, 10, 3, 12, 3, 82, 0, 14, 3, 16, 3, 85, 0, 86, 0, 18, 3, 20, 3, 89, 0, 22, 3, 24, 3, 92, 0, 93, 0, 27, 3, 95, 0, 29, 3, 31, 3, 98, 0, 99, 0, 33, 3, 35, 3, 102, 0, 37, 3, 39, 3, 105, 0, 106, 0, 41, 3, 43, 3, 109, 0, 45, 3, 47, 3, 112, 0, 113, 0, 49, 3, 51, 3, 116, 0, 53, 3, 55, 3, 119, 0, 120, 0, 57, 3, 59, 3, 123, 0, 61, 3, 63, 3, 126, 0, 127, 0, 65, 3, 67, 3, 130, 0, 69, 3, 71, 3, 133, 0, 134, 0, 73, 3, 75, 3, 137, 0, 77, 3, 79, 3, 140, 0, 141, 0, 81, 3, 83, 3, 144, 0, 85, 3, 87, 3, 147, 0, 148, 0, 90, 3, 150, 0, 92, 3, 94, 3, 153, 0, 154, 0, 96, 3, 98, 3, 157, 0, 100, 3, 102, 3, 160, 0, 161, 0, 104, 3, 106, 3, 164, 0, 108, 3, 110, 3, 167, 0, 168, 0, 112, 3, 114, 3, 171, 0, 116, 3, 118, 3, 174, 0, 175, 0, 120, 3, 122, 3, 178, 0, 124, 3, 125, 3, 181, 0, 127, 3, 129, 3, 184, 0, 131, 3, 133, 3, 187, 0, 188, 0, 135, 3, 137, 3, 191, 0, 139, 3, 141, 3, 194, 0, 195, 0, 143, 3, 145, 3, 198, 0, 148, 3, 200, 0, 201, 0, 150, 3, 152, 3, 204, 0, 154, 3, 156, 3, 207, 0, 208, 0, 158, 3, 160, 3, 211, 0, 162, 3, 164, 3, 214, 0, 215, 0, 166, 3, 168, 3, 218, 0, 170, 3, 172, 3, 221, 0, 222, 0, 174, 3, 176, 3, 225, 0, 178, 3, 180, 3, 228, 0, 229, 0, 182, 3, 184, 3, 232, 0, 186, 3, 188, 3, 235, 0, 236, 0, 190, 3, 192, 3, 239, 0, 194, 3, 196, 3, 242, 0, 243, 0, 198, 3, 200, 3, 246, 0, 202, 3, 203, 3, 249, 0, 205, 3, 207, 3, 252, 0, 209, 3, 211, 3, 255, 0, 0, 1, 213, 3, 215, 3, 3, 1, 217, 3, 219, 3, 6, 1, 7, 1, 221, 3, 223, 3, 10, 1, 225, 3, 227, 3, 13, 1, 14, 1, 229, 3, 231, 3, 17, 1, 233, 3, 235, 3, 20, 1, 21, 1, 237, 3, 239, 3, 24, 1, 241, 3, 243, 3, 27, 1, 28, 1, 245, 3, 247, 3, 31, 1, 249, 3, 250, 3, 34, 1, 252, 3, 254, 3, 37, 1, 0, 4, 2, 4, 40, 1, 41, 1, 4, 4, 6, 4, 44, 1, 8, 4, 10, 4, 47, 1, 48, 1, 12, 4, 14, 4, 51, 1, 16, 4, 18, 4, 54, 1, 55, 1, 20, 4, 22, 4, 58, 1, 24, 4, 26, 4, 61, 1, 62, 1, 28, 4, 30, 4, 65, 1, 32, 4, 34, 4, 68, 1, 69, 1, 36, 4, 38, 4, 72, 1, 40, 4, 42, 4, 75, 1, 76, 1, 44, 4, 46, 4, 79, 1, 48, 4, 50, 4, 82, 1, 83, 1, 52, 4, 54, 4, 86, 1, 56, 4, 57, 4, 89, 1, 59, 4, 61, 4, 92, 1, 63, 4, 65, 4, 95, 1, 96, 1, 67, 4, 69, 4, 99, 1, 71, 4, 72, 4, 102, 1, 74, 4, 76, 4, 105, 1, 78, 4, 80, 4, 108, 1, 109, 1, 82, 4, 84, 4, 112, 1, 86, 4, 88, 4, 115, 1, 116, 1, 90, 4, 92, 4, 119, 1, 94, 4, 96, 4, 122, 1, 123, 1, 98, 4, 100, 4, 126, 1, 102, 4, 104, 4, 129, 1, 130, 1, 106, 4, 108, 4, 133, 1, 110, 4, 112, 4, 136, 1, 137, 1, 114, 4, 115, 4, 117, 4, 119, 4, 142, 1, 143, 1, 121, 4, 123, 4, 146, 1, 125, 4, 127, 4, 149, 1, 150, 1, 129, 4, 131, 4, 153, 1, 133, 4, 135, 4, 156, 1, 157, 1, 137, 4, 139, 4, 160, 1, 141, 4, 143, 4, 163, 1, 164, 1, 145, 4, 147, 4, 167, 1, 149, 4, 151, 4, 170, 1, 171, 1, 153, 4, 155, 4, 174, 1, 157, 4, 159, 4, 177, 1, 178, 1, 161, 4, 163, 4, 181, 1, 165, 4, 167, 4, 184, 1, 185, 1, 169, 4, 171, 4, 188, 1, 173, 4, 175, 4, 191, 1, 192, 1, 177, 4, 179, 4, 195, 1, 181, 4, 183, 4, 198, 1, 199, 1, 185, 4, 187, 4, 202, 1, 189, 4, 191, 4, 205, 1, 206, 1, 193, 4, 195, 4, 209, 1, 197, 4, 199, 4, 212, 1, 213, 1, 201, 4, 203, 4, 216, 1, 205, 4, 207, 4, 219, 1, 220, 1, 209, 4, 211, 4, 223, 1, 213, 4, 215, 4, 226, 1, 227, 1, 217, 4, 219, 4, 230, 1, 221, 4, 223, 4, 233, 1, 234, 1, 226, 4, 236, 1, 228, 4, 230, 4, 239, 1, 240, 1, 232, 4, 234, 4, 243, 1, 236, 4, 238, 4, 246, 1, 247, 1, 240, 4, 242, 4, 250, 1, 244, 4, 246, 4, 253, 1, 254, 1, 249, 4, 0, 2, 251, 4, 253, 4, 3, 2, 4, 2, 255, 4, 1, 5, 7, 2, 3, 5, 5, 5, 10, 2, 11, 2, 7, 5, 9, 5, 14, 2, 11, 5, 13, 5, 17, 2, 18, 2, 15, 5, 17, 5, 21, 2, 19, 5, 21, 5, 24, 2, 25, 2, 23, 5, 25, 5, 28, 2, 28, 5, 30, 2, 31, 2, 30, 5, 32, 5, 34, 2, 34, 5, 36, 5, 37, 2, 38, 2, 38, 5, 40, 5, 41, 2, 42, 5, 44, 5, 44, 2, 45, 2, 46, 5, 48, 5, 48, 2, 50, 5, 52, 5, 51, 2, 52, 2, 54, 5, 56, 5, 55, 2, 58, 5, 60, 5, 58, 2, 59, 2, 62, 5, 64, 5, 62, 2, 66, 5, 68, 5, 65, 2, 66, 2, 70, 5, 72, 5, 69, 2, 74, 5, 76, 5, 72, 2, 73, 2, 78, 5, 80, 5, 76, 2, 82, 5, 84, 5, 79, 2, 80, 2, 86, 5, 88, 5, 83, 2, 90, 5, 92, 5, 86, 2, 87, 2, 94, 5, 96, 5, 90, 2, 98, 5, 100, 5, 93, 2, 94, 2, 102, 5, 104, 5, 97, 2, 106, 5, 108, 5, 100, 2, 101, 2, 110, 5, 112, 5, 104, 2, 114, 5, 116, 5, 107, 2, 108, 2, 118, 5, 120, 5, 111, 2, 122, 5, 123, 5, 114, 2, 125, 5, 127, 5, 117, 2, 129, 5, 131, 5, 120, 2, 121, 2, 133, 5, 135, 5, 124, 2, 137, 5, 139, 5, 127, 2, 128, 2, 141, 5, 143, 5, 131, 2, 145, 5, 147, 5, 134, 2, 135, 2, 149, 5, 151, 5, 138, 2, 153, 5, 155, 5, 141, 2, 142, 2, 157, 5, 159, 5, 145, 2, 161, 5, 163, 5, 148, 2, 149, 2, 165, 5, 167, 5, 152, 2, 169, 5, 171, 5, 155, 2, 156, 2, 173, 5, 175, 5, 159, 2, 177, 5, 179, 5, 162, 2, 163, 2, 181, 5, 183, 5, 166, 2, 185, 5, 187, 5, 169, 2, 170, 2, 110, 111, 100, 101, 115, 95, 119, 101, 105, 103, 104, 116, 115, 0, 16, 3, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 110, 111, 100, 101, 115, 95, 99, 108, 97, 115, 115, 105, 100, 115, 0, 0, 16, 3, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 116, 114, 101, 101, 95, 114, 111, 111, 116, 95, 105, 100, 115, 0, 100, 5, 0, 12, 0, 18, 0, 25, 0, 32, 0, 39, 0, 46, 0, 53, 0, 60, 0, 67, 0, 74, 0, 80, 0, 87, 0, 94, 0, 100, 0, 107, 0, 114, 0, 121, 0, 128, 0, 135, 0, 142, 0, 149, 0, 155, 0, 162, 0, 169, 0, 176, 0, 182, 0, 189, 0, 196, 0, 202, 0, 209, 0, 216, 0, 223, 0, 230, 0, 237, 0, 244, 0, 250, 0, 1, 1, 8, 1, 15, 1, 22, 1, 29, 1, 35, 1, 42, 1, 49, 1, 56, 1, 63, 1, 70, 1, 77, 1, 84, 1, 90, 1, 97, 1, 103, 1, 110, 1, 117, 1, 124, 1, 131, 1, 138, 1, 144, 1, 151, 1, 158, 1, 165, 1, 172, 1, 179, 1, 186, 1, 193, 1, 200, 1, 207, 1, 214, 1, 221, 1, 228, 1, 235, 1, 241, 1, 248, 1, 255, 1, 5, 2, 12, 2, 19, 2, 26, 2, 32, 2, 39, 2, 46, 2, 53, 2, 60, 2, 67, 2, 74, 2, 81, 2, 88, 2, 95, 2, 102, 2, 109, 2, 115, 2, 122, 2, 129, 2, 136, 2, 143, 2, 150, 2, 157, 2, 164, 2, 171, 2, 0, 16, 0, 224, 43, 110, 43, 179, 43, 206, 43, 4, 4, 196, 21, 93, 43, 52, 27, 246, 37, 94, 16, 157, 43, 174, 43, 142, 43, 18, 44, 246, 0, 30, 44, 32, 0, 2, 0, 16, 0, 244, 43, 129, 43, 198, 43, 227, 43, 24, 4, 212, 21, 112, 43, 70, 27, 12, 38, 116, 16, 172, 2, 16, 3, 100, 0, 39, 44, 13, 1, 1, 0, 20, 20, 20, 20, 101, 101, 101, 101, 101, 101, 9, 9, 9, 20, 100, 9, 48, 37, 1,  }; /* custom_initial_data */
const TfArray<1, int> inputs0 = { 1, { 0 } };
const TfArray<1, int> outputs0 = { 1, { 2 } };
const TfLiteReshapeParams opdata1 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs1 = { 2, { 2,1 } };
const TfArray<1, int> outputs1 = { 1, { 3 } };
const TfLiteSoftmaxParams opdata2 = { 1 };
const TfArray<1, int> inputs2 = { 1, { 3 } };
const TfArray<1, int> outputs2 = { 1, { 4 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 28, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension2, 8, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension3, 8, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension4, 8, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[3] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), const_cast<void*>(static_cast<const void*>(&g0::opdata0)), 11353, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[3] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), const_cast<void*>(static_cast<const void*>(&g0::opdata0)), 11353, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_TreeEnsembleClassifier, OP_RESHAPE, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 5, };
const size_t tflNodes_subgraph_index[] = {0, 3, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  4, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 5;
  for (size_t i = 0; i < 5; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_TreeEnsembleClassifier] = *Register_TreeEnsembleClassifier();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, tflNodes[i].custom_initial_data_size);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 3; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
